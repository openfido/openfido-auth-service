version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
jobs:
  test:
    docker:
      - image: python:3.8
    environment:
      PIPENV_VENV_IN_PROJECT: true
    working_directory: ~/my-project
    steps:
      - checkout
      - run:
          command: |
            apt-get update -qq
            apt-get install -y pipenv
            pip install virtualenv
      - restore_cache:
          keys:
            - project-pipfile-{{ checksum "Pipfile.lock" }}
      - run:
          command: pipenv install --dev --deploy
      - save_cache:
          key: project-pipfile-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv
      - run:
          command: |
            mkdir test-results
            pipenv run invoke test --junit --enforce-percent 92
      - store_test_results:
          path: test-results
      - run:
          command: pipenv run invoke style
      - run:
          command: pipenv run invoke lint --fail-under=9

  build-docker:
    docker:
      - image: circleci/python:3.8
    environment:
      DOCKER_BUILDKIT: "1"
    parameters:
      access-key:
        type: env_var_name
        default: STAGE_ACCESS_KEY_ID
      secret-key:
        type: env_var_name
        default: STAGE_SECRET_ACCESS_KEY
      ecr-url:
        type: env_var_name
        default: STAGE_ECR_ACCOUNT_URL
      repo:
        type: string
        default: openfido/stage-auth
      tag:
        type: string
        default: master
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - aws-ecr/build-and-push-image:
          extra-build-args: "--ssh default"
          tag: << parameters.tag >>
          repo: << parameters.repo >>
          account-url: << parameters.ecr-url >>
          aws-access-key-id: << parameters.access-key >>
          aws-secret-access-key: << parameters.secret-key >>
workflows:
  pullrequests:
    jobs:
      - test:
          filters:
            branches:
              ignore: /master/
  dev:
    jobs:
      - test:
          filters:
            branches:
              only: /master/
      - build-docker:
          requires:
            - test
          filters:
            branches:
              only: /master/
      - aws-ecs/deploy-service-update:
          requires:
            - build-docker
          filters:
            branches:
              only: /master/
          family: 'openfido-stage-auth-task'
          cluster-name: 'openfido-stage-ecs-cluster'
          service-name: 'openfido-stage-auth-service'
          container-image-name-updates: 'container=openfido-stage-auth-task,tag=master'
          aws-access-key-id: "$STAGE_ACCESS_KEY_ID"
          aws-secret-access-key: "$STAGE_SECRET_ACCESS_KEY"

  prod:
    jobs:
      - test:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+/
            branches:
              ignore: /.*/
      - build-docker:
          requires:
            - test
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+/
            branches:
              ignore: /.*/
          tag: $CIRCLE_TAG
          repo: openfido/prod-auth
          ecr-url: PROD_ECR_ACCOUNT_URL
          access-key: PROD_ACCESS_KEY_ID
          secret-key: PROD_SECRET_ACCESS_KEY
      - aws-ecs/deploy-service-update:
          requires:
            - build-docker
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)+/
            branches:
              ignore: /.*/
          family: 'openfido-prod-auth-task'
          cluster-name: 'openfido-prod-ecs-cluster'
          service-name: 'openfido-prod-auth-service'
          container-image-name-updates: 'container=openfido-prod-auth-task,tag=$CIRCLE_TAG'
          aws-access-key-id: "$PROD_ACCESS_KEY_ID"
          aws-secret-access-key: "$PROD_SECRET_ACCESS_KEY"